from django.shortcuts import render
from django.http import HttpResponse, HttpResponseRedirect

from django.urls import reverse
from account.auth_helper import get_sign_in_url, get_token_from_code
from account.graph_helper import get_user

# START: ONLY FOR EXAMPLE
def home(request):
  context = initialize_context(request)

  return render(request, 'tutorial/home.html', context)

def initialize_context(request):
  context = {}

  # Check for any errors in the session
  error = request.session.pop('flash_error', None)

  if error != None:
    context['errors'] = []
    context['errors'].append(error)

  # Check for user in the session
  context['user'] = request.session.get('user', {'is_authenticated': False})
  return context


def store_token(request, token):
      request.session['oauth_token'] = token

def store_user(request, user):
  request.session['user'] = {
    'is_authenticated': True,
    'name': user['displayName'],
    'email': user['mail'] if (user['mail'] != None) else user['userPrincipalName']
  }
# END: ONLY FOR EXAMPLE

def sign_in(request):
    '''
    The signin action generates the Azure AD signin URL, saves the state value generated by the OAuth client, 
    then redirects the browser to the Azure AD signin page.
    '''
    # Get the sign-in URL
    sign_in_url, state = get_sign_in_url()
    # Save the expected state so we can validate in the callback
    request.session['auth_state'] = state
    # Redirect to the Azure sign-in page
    return HttpResponseRedirect(sign_in_url)

def callback(request):
    '''
    The callback action is where Azure redirects after the signin is complete. 
    That action makes sure the state value matches the saved value, then uses the authorization code sent by Azure to request an access token.
    It then redirects back to the home page with the access token in the temporary error value. 
    You'll use this to verify that our sign-in is working before moving on.
    '''
    # Get the state saved in session
    expected_state = request.session.pop('auth_state', '')
    # Make the token request
    token = get_token_from_code(request.get_full_path(), expected_state)

    # Get the user's profile
    user = get_user(token)

    # Save token and user
    store_token(request, token)
    store_user(request, user)

    return HttpResponseRedirect(reverse('home'))
